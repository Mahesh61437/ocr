# Views.py


import os
import io
from google.cloud import vision

from django.http import JsonResponse, HttpResponse
from django.shortcuts import render, redirect

from .forms import UploadForm, DownloadForm


def detect_document(image_file=None, url=None):
    """Detects document features in an image."""
    client = vision.ImageAnnotatorClient()

    if url is not None:
        image = vision.Image()
        image.source.image_uri = url
    else:
        image = vision.Image(content=image_file)

    response = client.document_text_detection(image=image)

    word_text = ''

    for page in response.full_text_annotation.pages:
        for block in page.blocks:

            for paragraph in block.paragraphs:

                for word in paragraph.words:
                    word_text += ''.join([
                        symbol.text for symbol in word.symbols
                    ])

                    word_text += ' '

    if response.error.message:
        raise Exception()

    return word_text


# Create your views here.
def process_image(request):

    if request.method == 'POST':
        # create a form instance and populate it with data from the request:
        image_data = None
        image_url = None
        form = UploadForm(request.POST or None, request.FILES or None)
        # check whether it's valid:
        if form.is_valid():

            if request.FILES.get('image'):
                uploaded_image = request.FILES['image']
                image_data = uploaded_image.file.read()
            elif request.POST.get('url'):
                image_url = request.POST['url']
            else:
                return render(request, 'upload.html', {'form': form,
                                                       "errors": "invalid input. Expecting a image or a url"})

            output = detect_document(image_file=image_data, url=image_url)
            request.session['recognized_data'] = output

            return redirect('/result')
    # if a GET (or any other method) we'll create a blank form
    else:
        form = UploadForm()

    return render(request, 'upload.html', {'form': form})


def home(request):
    return render(request, 'home.html')


def result(request):

    form = DownloadForm(initial={"output": request.session['recognized_data']})
    return render(request, 'download.html', {'form': form})


def download_result(request):
    file_data = request.session['recognized_data']

    response = HttpResponse(file_data, content_type='application/text charset=utf-8')
    response['Content-Disposition'] = 'attachment; filename="output.txt"'
    return response


# urls.py

from django.urls import path
from .views import process_image, home, download_result, result


urlpatterns = [
    path('', home, name='home'),
    path('process_image', process_image, name='process_image'),
    path('result', result, name='result'),
    path('download', download_result, name='download'),

]


# forms.py

from django import forms


class UploadForm(forms.Form):
    image = forms.ImageField(label='Upload image', required=False)
    url = forms.CharField(required=False)


class DownloadForm(forms.Form):
    output = forms.CharField(widget=forms.Textarea)


# manage.py

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ocr.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


# settings.py

"""
Django settings for ocr project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = f'{BASE_DIR}/aerial-vehicle-325403-9637e7c7f7de.json'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-cg(ww)du$72+@$egwpdag)%6%88$-^w=u6)j_*(zta0c93qyrc'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'text_detection',
    'crispy_forms',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ocr.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ocr.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATICFILES_DIRS = [
   os.path.join(BASE_DIR / 'static')
]
STATIC_URL = '/static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CRISPY_TEMPLATE_PACK = 'bootstrap4'





# home.html

<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
	<link rel="stylesheet" type="text/css" href="{% static 'css/home.css'  %}">

</head>
<body>
    <div class="container py-5">

    <!-- For demo purpose -->
    <header class="text-white text-center">
        <h1 class="display-4">Hand written text recognition using OCR</h1>
        <p class="lead mb-0">Upload your image here</p>

        <img src="https://res.cloudinary.com/mhmd/image/upload/v1564991372/image_pxlho1.svg" alt="" width="150" class="mb-4">
    </header>

    <form>
        <div class="row py-4">
            <div class="col-lg-6 mx-auto">

                <!-- Upload image input-->
                <div class="input-group mb-3 px-2 py-2 rounded-pill bg-white shadow-sm">
                    <input id="upload" type="file" onchange="readURL(this);" class="form-control border-0">
                    <label id="upload-label" for="upload" class="font-weight-light text-muted">Choose file</label>
                    <div class="input-group-append">
                        <label for="upload" class="btn btn-light m-0 rounded-pill px-4"> <i class="fa fa-cloud-upload mr-2 text-muted"></i><small class="text-uppercase font-weight-bold text-muted">Choose file</small></label>
                    </div>
                </div>

                <div>

                </div>

                <!-- Uploaded image area-->
                <p class="font-italic text-white text-center">Image preview</p>
                <div class="image-area mt-4"><img id="imageResult" src="#" alt="" class="img-fluid rounded shadow-sm mx-auto d-block"></div>

            </div>
        </div>
    </form>
    </div>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
	<script src="{% static 'js/home.js' %}"></script>

</body>
</html>


# upload.html
<!doctype html>
{% load crispy_forms_tags %}
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
    <style>
    /* Custom style to set icon size */
    .alert i[class^="bi-"]{
      font-size: 1.5em;
      line-height: 1;
    }
    </style>
    <title>Upload Image</title>
  </head>
  <body>

  {% if errors%}
    <div class="alert alert-danger alert-dismissible d-flex align-items-center fade show">
        <i class="bi-exclamation-triangle-fill"></i>
        <strong class="mx-2">Error!</strong> Expecting a image or a url. Received none.
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
  {%endif%}
    <div class="container">
      <div class="row justify-content-center">
        <div class="col-8">
          <h1 class="mt-2">Hand written text recognition</h1>
          <hr class="mt-0 mb-4">
          <br>
          <br>
            <form method="POST" action="/process_image" enctype='multipart/form-data' >
              {% csrf_token %}
              {{ form|crispy }}
              <button type="submit" class="btn btn-success">Process image</button>
            </form>
        </div>
      </div>
    </div>
  </body>
</html>



# download.html

<!doctype html>
{% load crispy_forms_tags %}
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
    <title>Download Image</title>
  </head>
  <body>
    <div class="container">
      <div class="row justify-content-center">
        <div class="col-8">
          <h1 class="mt-2">Hand written text recognition</h1>
          <hr class="mt-0 mb-4">
          <a href="/process_image" class="btn btn-dark float-right">Upload new image</a>

          <br>
          <br>
            <form method="POST" action="/process_image" enctype='multipart/form-data' >
              {% csrf_token %}
              {{ form|crispy }}
              <a href="/download" download  class="btn btn-success float-right">Download</a>

            </form>
        </div>
      </div>
    </div>
  <script>
       function submitText() {
            var textVal = document.getElementById("txtarea").value;

            textVal = textVal.split('\n');

            if (textVal.length > 0) {
                for (const element of textVal) {
                    console.log(element);
                    window.open(element, "_blank");
                }

            }
      }
  </script>
  </body>
</html>
